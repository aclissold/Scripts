#!/usr/bin/env python3

"""Rainbowize makes your boring output SUPER EXCITINGâ„¢.

To run, if you'd normally run a program like:

    ./foo

or

    python3 foo.py some args and stuff

instead do:

    ./rainbowize.py ./foo

or

    ./rainbowize.py python3 foo.py some args and stuff

.

Note: you are at the mercy of the process you are calling. If that process
buffers its output, rainbowize will not receive any output until flushed.

"""

import os
import queue
import subprocess
import sys
import threading
import time

class AsynQueueRead(threading.Thread):
    """ Allows a subprocess to be logged asyc """

    def __init__(self, fd, queue):
        #assert isinstance(queue, queue.Queue)
        assert callable(fd.readline)
        threading.Thread.__init__(self)
        self.fd = fd
        self.queue = queue

    def run(self):
        for line in iter(self.fd.readline, ''):
            if line[-1]=='\n':
                line=line[:-1]

            self.queue.put(line)

    def done(self):
        return not self.is_alive() and self.queue.empty()

class Rainbowizer:
    """A class with which to rainbowize."""

    def __init__(self):
        """Save the color codes to a list and instantiate the process object."""
        self.colors = [
                '\033[38;5;196m', '\033[38;5;202m', '\033[38;5;208m',
                '\033[38;5;214m', '\033[38;5;220m', '\033[38;5;226m',
                '\033[38;5;154m', '\033[38;5;119m', '\033[38;5;120m',
                '\033[38;5;121m', '\033[38;5;122m', '\033[38;5;123m',
                '\033[38;5;117m', '\033[38;5;111m', '\033[38;5;105m',
                '\033[38;5;99m', '\033[38;5;93m']
        self.proc = subprocess.Popen(sys.argv[1:], stdin=subprocess.PIPE,
                stdout=subprocess.PIPE, stderr=subprocess.PIPE,
                universal_newlines=True)
        self.queue = queue.Queue()
        self.async_queue_stdout = AsynQueueRead(self.proc.stdout, self.queue)
        self.async_queue_stderr = AsynQueueRead(self.proc.stderr, self.queue)
        self.async_queue_stdout.start()
        self.async_queue_stderr.start()

    def rainbowize(self):
        """Listen to the output of p and apply color codes to it."""

        i = 0
        while not self.async_queue_stdout.done() and not self.async_queue_stderr.done():
            while not self.queue.empty():
                line = self.queue.get()
                if line != '':
                    # Preprend the color to the line
                    print(self.colors[i] + line, end='\n')
                    i += 1
                    if i == 15:
                        # Reverse the list to avoid counting backwards
                        self.colors.reverse()
                        i = 0
            time.sleep(0.1)
        self.async_queue_stdout.join()
        self.async_queue_stderr.join()
        self.proc.stdout.close()
        self.proc.stderr.close()

        self.proc.poll()
        return self.proc.returncode

if __name__ == "__main__":
    try:
        Rainbowizer().rainbowize()
    except KeyboardInterrupt:
        exit(0)
